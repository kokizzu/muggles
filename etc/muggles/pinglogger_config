## a bash source file used by pinglogger

## kill and rerun pinglogger to make the changes here work
## changes here will affect showcurrent.cgi (via pinglogger), pinglogger  and defaultrouting

#########################
## start of configurables

path_to_showcurrent="/usr/lib/cgi-bin/showcurrent.cgi"

number_of_hops_upstream=2
## hops upstream in that direction to fix what near ip to ping. 2 to 4 hops is a good number for nearness.

## where to log
near_pings_log="/var/log/muggles/near_pings.log"
remote_pings_log="/var/log/muggles/remote_pings.log"

ping_timeout=5 ;  ping_interval=2 ;  ping_count=10
#ping_timeout=1 ;  ping_interval=1 ;  ping_count=1

looptime=10
## amount of sleeptime used by defaultrouting script before it checks again if the default route connectivity still works 

NUMBER_OF_UPLINKS=$(ip link show | sed -e 's/[0-9][0-9]*: eth\([0-9][0-9]*\): <BROADCAST,MULTICAST,UP,LOWER_UP>.*/\1/' -e '$!{h;d;}' -e x)

## a list of remote (far) sites to ping per interface

remote_ping_uplinkk_name=( yahoo.com      google.com    facebook.com)
remote_ping_uplinkk_ip=(   209.131.36.159 74.125.45.100 69.63.187.19)

#for ((i=1; i<=$NUMBER_OF_UPLINKS; i++)) ; do remote_ping_uplinkk_ip[i-1]=$(host ${remote_ping_uplinkk_name[i-1]} | head -1 | cut -f4 -d" "); done
# host resolution will not work when uplink is missing at start so we can't actually use this. Build some logic around this later.


## end of configurables
########################


## generate list of near sites to ping per interface

for ((i=1; i<=$NUMBER_OF_UPLINKS; i++))
do
  interfacek_ip[i-1]=$(ip -4 -o addr show dev eth${i} | sed -n 's/^.*inet \(.*\)\/.*$/\1/p')
  nearip=$(
           mtr -4 -a ${interfacek_ip[i-1]} --no-dns -c1 -r ${remote_ping_uplinkk_ip[i-1]} | \
           grep -m$number_of_hops_upstream -o "[[:digit:]]\{1,3\}\.[[:digit:]]\{1,3\}\.[[:digit:]]\{1,3\}\.[[:digit:]]\{1,3\}" | \
           tail -1
          )

  if [[ $nearip = "" ]] ; then
    nearip=${interfacek_ip[i-1]}
  fi
  nearipk[i-1]=$nearip
done


