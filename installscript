#!/bin/bash

#set -x -v

if [[ ! `cat /etc/issue` =~ "Debian GNU/Linux 5.0" ]] ; then echo "This doesn't look like Lenny. Stopping." && exit 0 ; fi
if [[ $PWD == "/" ]] ; then echo "Do the install from the source directory. Fix and run again." && exit 0  ; fi

for i in incron iproute dnsmasq lighttpd sudo nmap logrotate vnstat squid resolvconf openntpd ntpdate mtr dnsutils openssh-client openssh-server
## openssh-client and openssh-server are not needed but very useful
do 
  if [[ ! `( dpkg -s $i | grep ^Status )` =~ ^"Status: install ok installed" ]] ; then echo "Install $i first. Fix and run again." && exit 0  ; fi
done

## for squid at least:
( grep ^127.0.0.1 /etc/hosts | awk '{print $3}' | grep -q \. ) || {
  echo "Need an fqdn in /etc/hosts"
  echo 'Eg: modify: 127.0.0.1 localhost ---> 127.0.0.1 localhost '`hostname`'.local'
  echo "Run again after fixing."
  exit 0
}

## admonition to adjust /etc/network/interfaces
echo "
YOU MUST have eth0 active and set to the LAN IP you will be using
if you want squid configuration to be done correctly during
installation. Otherwise you will have to go through the muggles
squid documentation to correct the guesses made during installation.
Eg: if your IP on the LAN is 192.168.0.12, activate it with:
  ifconfig eth0 192.168.0.12 up
    or
  ip addr add 192.168.0.12/24 dev eth0


YOU MUST adjust the network settings in /etc/network/interfaces
to set it up for your own network layout. Unless your own network
follows the default address values of muggles (see muggles test
environment documentation). The adjusted values will take hold
after reboot.

This installation script is meant for a clean lenny system. It
will set default working interface addresses that are consistent,
but these settings are unlikely to suit your network. The settings
will take hold after reboot.

This installer may not follow the debian policy manual very well.
Making a real debian package out of this is the direction further
development is intended.

The README file gives exact details on how a clean lenny is 
changed to a default muggles installation. Read it to fix a
broken installation.

[press enter to continue]
"
read
## put a network config script in later (feed to muggles/interfaces?)
#tar xvzf muggles.tgz

##



###(
## matches column line at end, for pretty output but you'll have to disable read prompts for all code between brackets


function mkdir_if_not_there {
if [[ ! -d $1 ]] ; then ( mkdir $1 && echo "created $1" ) ; fi
}

mkdir_if_not_there "/var/log/muggles"
mkdir_if_not_there '/etc/muggles'



function package_install {

ts=`date +%Y%m%d%H%M%S`
package_version="$1"
installed_version="$2"


if [[ -e $package_version ]] ; then
   if [[ -e $installed_version ]] ; then
      if [[ -n `diff $installed_version $package_version` ]] ; then
         echo "$installed_version which is already installed is going to be changed to the muggles version. Change? [y]" ; read yesno
         if [[ $yesno =~ (n|N) ]] ; then
           echo "Keeping $installed_version. This may break things so the installation will not work."
         else
           ( cp $installed_version "$installed_version"_"$ts" ) && echo "made a backup of the already installed version to ""$installed_version"'_'"$ts"
           ( cp $package_version $installed_version ) && echo "overwrote already installed version $installed_version with muggles version $package_version"
         fi
      else
          echo "$installed_version and $package_version are the same, so changing nothing" 
      fi
   else
      echo "No default already-installed version of $installed_version found. Creating..."
        ( cp $package_version $installed_version ) && echo "created $installed_version"
   fi
else
   echo "No $package_version (package version) file found. So changing nothing."
fi

}



## /etc/
package_install etc/network/interfaces /etc/network/interfaces

## later, with debconf: user changes interface values
##  then have to run a lot of stuff again including some crontab entries 

package_install etc/dnsmasq.conf /etc/dnsmasq.conf 
package_install etc/muggles/interfaces /etc/muggles/interfaces
package_install etc/muggles/pinglogger_config /etc/muggles/pinglogger_config
## cp etc/muggles/* /etc/muggles/
package_install etc/lighttpd/lighttpd.conf /etc/lighttpd/lighttpd.conf
lighty-enable-mod cgi ; /etc/init.d/lighttpd restart

package_install etc/squid/squid.conf /etc/squid/squid.conf


## /usr/local/sbin
package_install usr/local/sbin/masq_ipconf /usr/local/sbin/masq_ipconf
package_install usr/local/sbin/pinglogger /usr/local/sbin/pinglogger
package_install usr/local/sbin/rulerunner /usr/local/sbin/rulerunner
package_install usr/local/sbin/mixed /usr/local/sbin/mixed
package_install usr/local/sbin/defaultrouting /usr/local/sbin/defaultrouting

## /usr/lib/cgi-bin

package_install usr/lib/cgi-bin/cgi-test.cgi /usr/lib/cgi-bin/cgi-test.cgi
package_install usr/lib/cgi-bin/mixed.cgi /usr/lib/cgi-bin/mixed.cgi
package_install usr/lib/cgi-bin/showcurrent.cgi /usr/lib/cgi-bin/showcurrent.cgi
package_install usr/lib/cgi-bin/shutcommand.cgi /usr/lib/cgi-bin/shutcommand.cgi
package_install usr/lib/cgi-bin/switchisps.cgi /usr/lib/cgi-bin/switchisps.cgi


## /var/www/

package_install var/www/background.gif /var/www/background.gif
package_install var/www/button-a.gif /var/www/button-a.gif
package_install var/www/button.gif /var/www/button.gif 
package_install var/www/favicon.ico /var/www/favicon.ico 
package_install var/www/index.html /var/www/index.html
package_install var/www/index.lighttpd.html /var/www/index.lighttpd.html
package_install var/www/output.html /var/www/output.html
package_install var/www/shutdown.html /var/www/shutdown.html
package_install var/www/switched.html /var/www/switched.html



## cron

## need to check pre existence

## add these lines

ARRAY=(\
'@reboot       /etc/init.d/openntpd stop && /usr/sbin/ntpdate-debian && /etc/init.d/openntpd start' \
'@reboot       >/var/lib/misc/dnsmasq.leases.1 ; /usr/local/sbin/rulerunner /var/lib/misc/dnsmasq.leases' \
'@reboot       for i in `grep -v ^# /etc/muggles/interfaces | grep .` ; do /usr/local/sbin/masq_ipconf $i ; done' \
'@reboot       sleep 20; /usr/local/sbin/defaultrouting' \
'@reboot       sleep 30; aptitude update ; aptitude -q -s -y safe-upgrade | grep -A1 "The following packages will be upgraded:" | tail -1 | sed "s/^  //" > /var/log/muggles/secupdates' \
'@reboot       sleep 40; /usr/local/sbin/pinglogger'\
)


ELEMENTS=${#ARRAY[@]}

for (( i=0;i<$ELEMENTS;i++ )); do
if ( grep -v ^# /var/spool/cron/crontabs/root  | grep ^"${ARRAY[${i}]}$" 2>&1 >/dev/null )
   then echo "have a matching line for array element $i in crontab, so changing nothing" 
   else
   echo "installing array element $i into crontab"
   ( crontab -l
cat<<crontab_add
${ARRAY[${i}]}
crontab_add
) | crontab -
fi
done

( crontab -l | tail -1 | grep -v . ) || ( echo "cron needs a blank line at end, so adding it" 
   ( crontab -l ; echo ) | crontab -
)



## incron

( grep -q ^root$ /etc/incron.allow ) || { echo root >> /etc/incron.allow ; }

## need to check preexistence

if [[ `incrontab -l` =~ '/var/lib/misc/dnsmasq.leases IN_MODIFY,IN_NO_LOOP /usr/local/sbin/rulerunner $@' ]]
   then echo "have a matching incron line, so changing nothing" 
   else
   echo "installing line into incrontab"
   ( incrontab -l
cat<<incrontab_add
/var/lib/misc/dnsmasq.leases IN_MODIFY,IN_NO_LOOP /usr/local/sbin/rulerunner \$@
incrontab_add
) | incrontab -
fi


## sudoers

this_host=`hostname`

## add these lines to sudoers after checks

ARRAY=(\
"www-data        $this_host= NOPASSWD: /sbin/shutdown" \
"www-data        $this_host= NOPASSWD: /sbin/ip" \
"www-data        $this_host= NOPASSWD: /usr/bin/nmap" \
"www-data        $this_host= NOPASSWD: /usr/local/sbin/rulerunner" \
"www-data        $this_host= NOPASSWD: /usr/local/sbin/mixed"\
)

while [[ -e /etc/sudoers.tmp ]] ; do ( echo "sudoers.tmp exists - is sudoers being edited already? If so, fix it then continue by pressing enter"  ; read ) ; done

touch /etc/sudoers.tmp

ELEMENTS=${#ARRAY[@]}

for (( i=0;i<$ELEMENTS;i++)); do
if ( grep ^"${ARRAY[${i}]}" /etc/sudoers 2>&1 >/dev/null ) 
   then echo "have a matching line for ${ARRAY[${i}]} in sudoers, so changing nothing" 
   else
   ( 
cat<<sudoer_add
${ARRAY[${i}]}
sudoer_add
) >> /etc/sudoers
fi
done

rm /etc/sudoers.tmp



## bandwidthd
if [[ -e /etc/bandwidthd/bandwidthd.conf ]] ; then
  if [[ -L /var/www/bandwidthd ]] ; then echo "have a symlink bandwidthd already so changing nothing"
                                    else ln -s /var/lib/bandwidthd/htdocs/ /var/www/bandwidthd && echo 'made symlink /var/lib/bandwidthd/htdocs -> /var/www/bandwidthd'
  fi
fi



## squid

## when network interfaces is set up (package install section) I should restart squid
## after that squid config routine here will configure ok



visname=$( grep ^127.0.0.1 /etc/hosts | awk '{print $3}' | grep \. )                                                                                                                                                                                        
if [[ -e /etc/squid/squid.conf ]] ;
     then function squidconf_modify {
     squidconflinestart="$1" ; insertionpointstring="$2"
     ( grep -v ^# /etc/squid/squid.conf | grep ^"$squidconflinestart" ) 2>&1 > /dev/null || \
     sed -i "s/^\($insertionpointstring$\)/\1\n$squidconflinestart\n/" /etc/squid/squid.conf
     }


     ournetwork=$(ip route show dev eth0 | head -1 | awk '{print $1}' | sed 's/\//\\\//' )
     squidconf_modify "acl our_networks src $ournetwork" 'http_access allow localhost' 
     squidconf_modify "http_access allow our_networks" "acl our_networks src $ournetwork"



     squidconf_modify "http_port 127.0.0.1:3128 transparent" "http_port 3128"
     sed -i "s/^\(http_port 3128$\)/#\1/" /etc/squid/squid.conf


     eth0ip=$(ip -4 -o addr show dev eth0 | sed -n 's/^.*inet \(.*\)\/.*$/\1/p')
     ## should really panic if there is no eth0ip, but putting in a default ip is what we do instead
     if [[ -z $eth0ip ]] ; then eth0ip=192.168.0.12 ; fi

     squidconf_modify "http_port $eth0ip:3128 transparent" "http_port 127.0.0.1:3128 transparent"
     squidconf_modify "visible_hostname $visname" "http_port $eth0ip:3128 transparent"
fi

## the above patches original squid.conf like this

## < acl our_networks src 192.168.0.0/24
## < http_access allow our_networks
## < 

## < #http_port 3128
## < http_port 127.0.0.1:3128 transparent
## < http_port 192.168.0.12:3128 transparent
## < visible_hostname lennygwbox.local
## < 
## ---
## > http_port 3128
## 


## vnstat
## Gather vnstat data for interfaces except eth0. (initializes database gathering if it isn't already in place. Updates if it is already there)
for i in `grep -v ^# /etc/muggles/interfaces | grep . | grep -v eth0` ; do vnstat -u -i $i ; echo "vnstat running for $i" ; done


##### ) | column -s, -t
## matches a bracket at the begining, but you'll have to disable read prompts..

echo "Reboot now, and everything should probably just work"

